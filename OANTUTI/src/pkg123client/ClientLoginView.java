/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg123client;


import java.awt.event.*;
import java.io.*;

import java.net.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author ATTT
 */
public class ClientLoginView extends javax.swing.JFrame {
    String address = "localhost";
    ArrayList<String> users = new ArrayList();
    int port = 2223;
    Boolean isConnected = false;
    public static Socket sock;
    ObjectInputStream reader;
    ObjectOutputStream writer;
    public static ClientShowMess clSM;
    public static ClientWaitingView clWV;
    public static ClientSignUpView clSUV;
    /**
     * Creates new form ClientLoginView
     */
    public void ListenThread() 
    {
         Thread t = new Thread(new IncomingReader(writer, reader));
         t.start();
         
    }
    public ClientLoginView() {
        clSM = new ClientShowMess();
        initComponents();
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                if (isConnected == false) {

                } else if (isConnected == true) {
                    User user = new User();
                    user.setAction(2);
                    try {
                        
                        writer.writeObject(user);
                        isConnected = false;
                        sock.close();
                    } catch (Exception ex) {
                        isConnected = false;
                        clSM.showMess("Cannot Connect! Try Again. \n");
                    }
                }
            }
        }
        );
    }

    
    
    
    
    
    
    
    public int checkLogin(){
        if(jTextField1.getText().equals("") || jPasswordField1.getText().equals(""))return 0;
        return 1;
    }
    public void showMess(String mes){
        JOptionPane.showMessageDialog(this, mes);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPasswordField1 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jButton1.setText("Sign In");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Sign Up");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setText("User Name");

        jLabel2.setText("Pass word");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(91, 91, 91)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(21, 21, 21)
                        .addComponent(jPasswordField1)))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (checkLogin() == 1) {
            if (isConnected == false) {
                User user = new User(jTextField1.getText(), jPasswordField1.getText(), 1);
                System.out.println(user.getUsername()+":"+user.getPassword()+":"+user.getAction());
                try {
                    sock = new Socket(address, port);
                    reader = new ObjectInputStream(sock.getInputStream());
                    writer = new ObjectOutputStream(sock.getOutputStream()); 
                    writer.writeObject(user);
                    Object o = reader.readObject();
                    if(o instanceof User){
                        User man = (User) o;
                        String data[];
                        data = man.getMission().split(":");
                        if (data[0].equals("1")) {
                            if (data[1].equals("loginsuccessfully")) {
                                isConnected = true;
                                ListenThread();
                                ClientLoginView.clSM.showMess("Login succesfully");
                                this.setVisible(false);
                                clWV = new ClientWaitingView( man,reader, writer);
                                clWV.setVisible(true);
                              
                            }
                            if (data[1].equals("loginfalse")) {
                                 isConnected = true;
                                ClientLoginView.clSM.showMess("Invaild username or password!");
                               // sock.close();
                                
                            }
                            if (data[1].equals("thisaccisusing")) {
                                 isConnected = true;
                                ClientLoginView.clSM.showMess("This account is activing");
                               // sock.close();
                               
                            }
                        }
                    }  
                } catch (Exception ex) {
                    isConnected = false;
                    clSM.showMess("Cannot Connect! Try Again. \n");
                    clSM.showMess(ex.toString());
                }
            } else if (isConnected == true) {
                User user = new User(jTextField1.getText(), jPasswordField1.getText(), 1);
                try {
                    writer.writeObject(user);
                    Object o = reader.readObject();
                    if (o instanceof User) {
                        User man = (User) o;
                        String data[];
                        data = man.getMission().split(":");
                        if (data[0].equals("1")) {
                            if (data[1].equals("loginsuccessfully")) {
                                
                                isConnected = true;
                                ListenThread();
                                ClientLoginView.clSM.showMess("Login succesfully");
                                String m = new Integer(man.getListUserOnline().size()).toString();
                                 
                                this.setVisible(false);
                                clWV = new ClientWaitingView(man,reader, writer);
                                clWV.setVisible(true);
                            }
                            if (data[1].equals("loginfalse")) {
                             
                                ClientLoginView.clSM.showMess("Invaild username or password!");
                                
                            }
                            if (data[1].equals("thisaccisusing")) {
                                ClientLoginView.clSM.showMess("This account is activing");
                               
                            }
                        }
                    }
                } catch (Exception ex) {
                    isConnected = false;
                    clSM.showMess("Cannot Connect! Try Again. \n");
                }
            }
        } else {
            clSM.showMess("Require to fill the box!");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(isConnected == false){
            try {
                    sock = new Socket(address, port);
                    reader = new ObjectInputStream(sock.getInputStream());
                    writer = new ObjectOutputStream(sock.getOutputStream()); 
                    clSUV = new ClientSignUpView(writer, reader);
                    clSUV.setVisible(true);
                    isConnected = true;
            }catch(Exception e){
                
            }
        }
        if(isConnected == true){
            clSUV = new ClientSignUpView(writer, reader);
            clSUV.setVisible(true);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
